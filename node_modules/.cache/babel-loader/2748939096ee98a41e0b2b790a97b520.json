{"ast":null,"code":"var _jsxFileName = \"/Users/themislee/Documents/redo/src/Login.js\";\nimport ReactDOM from 'react-dom';\nimport React, { useState } from \"react\";\nimport { Form, Icon, Input, Button, Checkbox, Row, Col } from \"antd\";\n\nclass NormalLoginForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n  }\n\n  // const {\n  //     getFieldDecorator,\n  //     getFieldsError,\n  //     getFieldValue,\n  //     isFieldTouched\n  // } = props.form;\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your Password!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, getFieldDecorator('remember', {\n      valuePropName: 'checked',\n      initialValue: true\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Remember me\")), React.createElement(\"a\", {\n      className: \"login-form-forgot\",\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Forgot password\"), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Log in\"), \"Or \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"register now!\")));\n  }\n\n}\n\nconst WrappedNormalLoginForm = Form.create({\n  name: 'normal_login'\n})(NormalLoginForm); // ReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n\nexport default NormalLoginForm; //\n// const LoginForm = props => {\n//   const defaultEmail = \"\";\n//   const defaultPassword = \"\";\n//   const [email, setEmail] = useState(defaultEmail);\n//   const [password, setPassword] = useState(defaultPassword);\n//\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   const {\n//     getFieldDecorator,\n//     getFieldsError,\n//     getFieldValue,\n//     isFieldTouched\n//   } = props.form;\n//\n//   function hasErrors(fieldsError) {\n//     return Object.keys(fieldsError).some(field => fieldsError[field]);\n//   }\n//\n//   const isLoginButtonDisabled =\n//     hasErrors(getFieldsError()) ||\n//     !isFieldTouched(\"email\") ||\n//     !isFieldTouched(\"password\");\n//\n//   const onSubmit = (email, password) => {\n//     setEmail(email);\n//     setPassword(password);\n//     setIsLoggedIn(true);\n//     console.log(email, password, isLoggedIn);\n//   };\n//\n//   const loginHeader = isLoggedIn ? (\n//     <h1 className=\"title\">Welcome Back</h1>\n//   ) : (\n//     <h1 className=\"title\">Log In/Sign Up Page</h1>\n//   );\n//\n//   return (\n//     <div>\n//       <style jsx={true}>{`\n//         .title {\n//           font-size: 50px;\n//           letter-spacing: normal;\n//           color: rgba(0, 0, 0, 0.85);\n//           margin: auto;\n//           text-align: center;\n//         }\n//       `}</style>\n//       <Row type=\"flex\" justify=\"center\">\n//         <Col span={4} style={{ minWidth: \"320px\" }}>\n//           <br />\n//           <br />\n//           <br />\n//           <br />\n//           <br />\n//           <div className=\"title\">{loginHeader}</div>\n//           <br />\n//           <br />\n//           <Form\n//             // {...formProps}\n//             // className=\"login-form\"\n//             // layout={\"\"}\n//             // tslint:disable-next-line jsx-no-lambda\n//             onSubmit={evt => {\n//               if (!isLoginButtonDisabled) {\n//                 // setLoading(true);\n//                 evt.preventDefault();\n//                 onSubmit(email, password);\n//               }\n//             }}\n//           >\n//             <Form.Item label=\"Username\">\n//               {getFieldDecorator(\"username\", {\n//                 rules: [\n//                   {\n//                     required: true,\n//                     message: \"username\"\n//                   }\n//                   // ,{\n//                   //   type: \"username\",\n//                   //   message: \"The input is not valid email!\"\n//                   // }\n//                 ]\n//                 // initialValue: defaultEmail\n//               })(\n//                 <Input\n//\n//                   placeholder=\"username\"\n//                   size=\"large\"\n//                   // onChange={handleEmailChange}\n//                 />\n//               )}\n//             </Form.Item>\n//             <Form.Item label=\"Password\">\n//               {getFieldDecorator(\"password\", {\n//                 rules: [\n//                   {\n//                     required: true,\n//                     message: \"password\"\n//                   }\n//                 ]\n//                 // initialValue: defaultPassword\n//               })(\n//                 <Input\n//\n//                   type=\"password\"\n//                   placeholder=\"Password\"\n//                   size=\"large\"\n//                   // onChange={handlePasswordChange}\n//                 />\n//               )}\n//             </Form.Item>\n//             <br />\n//             <Form.Item>\n//               <Button\n//                 type=\"primary\"\n//                 htmlType=\"submit\"\n//                 disabled={\n//                   hasErrors(getFieldsError()) ||\n//                   !isFieldTouched(\"username\") ||\n//                   !isFieldTouched(\"password\")\n//                 }\n//                 block={true}\n//                 // loading={loading}\n//                 size={\"large\"}\n//                 // tslint:disable-next-line jsx-no-lambda\n//                 onClick={evt => {\n//                   // setLoading(true);\n//                   evt.preventDefault();\n//                   // onSubmit(email, password);\n//                   onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n//                 }}\n//               >\n//                 Log in\n//               </Button>\n//             </Form.Item>\n//           </Form>\n//         </Col>\n//       </Row>\n//       {/* <Link to=\"/register\">Sign Up</ Link>\n//       {/* <br />\n//       <br />\n//       Or <a href=\"/register\">register now!</a> */}\n//     </div>\n//   );\n// };\n//\n// const WrappedNormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\n//\n// export default WrappedNormalLoginForm;","map":{"version":3,"sources":["/Users/themislee/Documents/redo/src/Login.js"],"names":["ReactDOM","React","useState","Form","Icon","Input","Button","Checkbox","Row","Col","NormalLoginForm","Component","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","render","getFieldDecorator","rules","required","message","color","valuePropName","initialValue","WrappedNormalLoginForm","create","name"],"mappings":"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":["import ReactDOM from 'react-dom';\nimport React, { useState } from \"react\";\nimport {Form, Icon, Input, Button, Checkbox, Row, Col } from \"antd\";\n\nclass NormalLoginForm extends React.Component {\n  \n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n  // const {\n  //     getFieldDecorator,\n  //     getFieldsError,\n  //     getFieldValue,\n  //     isFieldTouched\n  // } = props.form;\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <Form.Item>\n          {getFieldDecorator('username', {\n            rules: [{ required: true, message: 'Please input your username!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder=\"Username\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Password\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('remember', {\n            valuePropName: 'checked',\n            initialValue: true,\n          })(<Checkbox>Remember me</Checkbox>)}\n          <a className=\"login-form-forgot\" href=\"\">\n            Forgot password\n          </a>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n            Log in\n          </Button>\n          Or <a href=\"\">register now!</a>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\n\n// ReactDOM.render(<WrappedNormalLoginForm />, mountNode);\nexport default NormalLoginForm;\n//\n// const LoginForm = props => {\n//   const defaultEmail = \"\";\n//   const defaultPassword = \"\";\n//   const [email, setEmail] = useState(defaultEmail);\n//   const [password, setPassword] = useState(defaultPassword);\n//\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   const {\n//     getFieldDecorator,\n//     getFieldsError,\n//     getFieldValue,\n//     isFieldTouched\n//   } = props.form;\n//\n//   function hasErrors(fieldsError) {\n//     return Object.keys(fieldsError).some(field => fieldsError[field]);\n//   }\n//\n//   const isLoginButtonDisabled =\n//     hasErrors(getFieldsError()) ||\n//     !isFieldTouched(\"email\") ||\n//     !isFieldTouched(\"password\");\n//\n//   const onSubmit = (email, password) => {\n//     setEmail(email);\n//     setPassword(password);\n//     setIsLoggedIn(true);\n//     console.log(email, password, isLoggedIn);\n//   };\n//\n//   const loginHeader = isLoggedIn ? (\n//     <h1 className=\"title\">Welcome Back</h1>\n//   ) : (\n//     <h1 className=\"title\">Log In/Sign Up Page</h1>\n//   );\n//\n//   return (\n//     <div>\n//       <style jsx={true}>{`\n//         .title {\n//           font-size: 50px;\n//           letter-spacing: normal;\n//           color: rgba(0, 0, 0, 0.85);\n//           margin: auto;\n//           text-align: center;\n//         }\n//       `}</style>\n//       <Row type=\"flex\" justify=\"center\">\n//         <Col span={4} style={{ minWidth: \"320px\" }}>\n//           <br />\n//           <br />\n//           <br />\n//           <br />\n//           <br />\n//           <div className=\"title\">{loginHeader}</div>\n//           <br />\n//           <br />\n//           <Form\n//             // {...formProps}\n//             // className=\"login-form\"\n//             // layout={\"\"}\n//             // tslint:disable-next-line jsx-no-lambda\n//             onSubmit={evt => {\n//               if (!isLoginButtonDisabled) {\n//                 // setLoading(true);\n//                 evt.preventDefault();\n//                 onSubmit(email, password);\n//               }\n//             }}\n//           >\n//             <Form.Item label=\"Username\">\n//               {getFieldDecorator(\"username\", {\n//                 rules: [\n//                   {\n//                     required: true,\n//                     message: \"username\"\n//                   }\n//                   // ,{\n//                   //   type: \"username\",\n//                   //   message: \"The input is not valid email!\"\n//                   // }\n//                 ]\n//                 // initialValue: defaultEmail\n//               })(\n//                 <Input\n//\n//                   placeholder=\"username\"\n//                   size=\"large\"\n//                   // onChange={handleEmailChange}\n//                 />\n//               )}\n//             </Form.Item>\n//             <Form.Item label=\"Password\">\n//               {getFieldDecorator(\"password\", {\n//                 rules: [\n//                   {\n//                     required: true,\n//                     message: \"password\"\n//                   }\n//                 ]\n//                 // initialValue: defaultPassword\n//               })(\n//                 <Input\n//\n//                   type=\"password\"\n//                   placeholder=\"Password\"\n//                   size=\"large\"\n//                   // onChange={handlePasswordChange}\n//                 />\n//               )}\n//             </Form.Item>\n//             <br />\n//             <Form.Item>\n//               <Button\n//                 type=\"primary\"\n//                 htmlType=\"submit\"\n//                 disabled={\n//                   hasErrors(getFieldsError()) ||\n//                   !isFieldTouched(\"username\") ||\n//                   !isFieldTouched(\"password\")\n//                 }\n//                 block={true}\n//                 // loading={loading}\n//                 size={\"large\"}\n//                 // tslint:disable-next-line jsx-no-lambda\n//                 onClick={evt => {\n//                   // setLoading(true);\n//                   evt.preventDefault();\n//                   // onSubmit(email, password);\n//                   onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n//                 }}\n//               >\n//                 Log in\n//               </Button>\n//             </Form.Item>\n//           </Form>\n//         </Col>\n//       </Row>\n//       {/* <Link to=\"/register\">Sign Up</ Link>\n//       {/* <br />\n//       <br />\n//       Or <a href=\"/register\">register now!</a> */}\n//     </div>\n//   );\n// };\n//\n// const WrappedNormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\n//\n// export default WrappedNormalLoginForm;\n"]},"metadata":{},"sourceType":"module"}