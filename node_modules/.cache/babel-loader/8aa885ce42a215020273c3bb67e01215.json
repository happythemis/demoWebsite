{"ast":null,"code":"import _slicedToArray from\"/Users/themislee/Documents/redo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Form,Input,Button,Row,Col,Icon}from\"antd\";// import \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n// import { createForm } from \"rc-form\";\n// import { useForm } from \"sunflower-antd\";\n// import { WrappedFormUtils } from \"antd/lib/form/Form\";\n// const LoginForm = props => {\n//   // const handleValuesChange = () => console.log('Value changes').\n//   // const form = useform({\n//   //   onValuesChange: handleValuesChange,\n//   // });\n//   const { getFieldDecorator, validateFields } = props.form;\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     validateFields((err, values) => {\n//       if (!err) {\n//         console.log(\"Received values of form: \", values);\n//       }\n//     });\n//   };\n//   return (\n//     <Form onSubmit={handleSubmit}>\n//       <FormItem>\n//         {getFieldDecorator(\"userName\")(<Input placeholder=\"Username\" />)}\n//       </FormItem>\n//     </Form>\n//   );\n// };\n// const { useForm } = Form;\nvar LoginForm=function LoginForm(props){var defaultEmail=\"\";var defaultPassword=\"\";var _useState=useState(defaultEmail),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];var _useState3=useState(defaultPassword),_useState4=_slicedToArray(_useState3,2),password=_useState4[0],setPassword=_useState4[1];// const [loading, setLoading] = useState(false);\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoggedIn=_useState6[0],setIsLoggedIn=_useState6[1];// const { formProps } = useForm({ form });\n// const handleEmailChange = value => {\n//   setEmail(value);\n// };\n// const handlePasswordChange = value => {\n//   setPassword(value);\n// };\n// const form = useForm({\n//   // onValuesChcdange: onChangeBase\n// });\n// const { WrappedFormUtils } = props;\nvar _props$form=props.form,getFieldDecorator=_props$form.getFieldDecorator,getFieldsError=_props$form.getFieldsError,getFieldValue=_props$form.getFieldValue,isFieldTouched=_props$form.isFieldTouched;function hasErrors(fieldsError){return Object.keys(fieldsError).some(function(field){return fieldsError[field];});}var isLoginButtonDisabled=hasErrors(getFieldsError())||!isFieldTouched(\"email\")||!isFieldTouched(\"password\");var _onSubmit=function onSubmit(email,password){setEmail(email);setPassword(password);setIsLoggedIn(true);console.log(email,password,isLoggedIn);};var loginHeader=isLoggedIn?React.createElement(\"h1\",{className:\"title\"},\"You Logged In\"):React.createElement(\"h1\",{className:\"title\"},\"Please Log In\");return React.createElement(\"div\",null,React.createElement(\"style\",{jsx:true},\"\\n        .title {\\n          font-family: Roboto;\\n          font-size: 38px;\\n          font-weight: bold;\\n          font-style: normal;\\n          font-stretch: normal;\\n          line-height: 1.42;\\n          letter-spacing: normal;\\n          color: rgba(0, 0, 0, 0.85);\\n          margin: auto;\\n          text-align: center;\\n        }\\n      \"),React.createElement(Row,{type:\"flex\",justify:\"end\"},React.createElement(Col,{offset:2,span:4,style:{minWidth:\"320px\"}},React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"div\",{className:\"title\"},loginHeader),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(Form// {...formProps}\n// className=\"login-form\"\n,{layout:\"vertical\"// tslint:disable-next-line jsx-no-lambda\n,onSubmit:function onSubmit(evt){if(!isLoginButtonDisabled){// setLoading(true);\nevt.preventDefault();_onSubmit(email,password);}}},React.createElement(Form.Item,{label:\"Email\"},getFieldDecorator(\"email\",{rules:[{required:true,message:\"Please input your email!\"},{type:\"email\",message:\"The input is not valid email!\"}]// initialValue: defaultEmail\n})(React.createElement(Input,{prefix:React.createElement(Icon,{type:\"mail\",style:{color:\"rgba(0,0,0,.25)\"}}),placeholder:\"Email\",size:\"large\"// onChange={handleEmailChange}\n}))),React.createElement(Form.Item,{label:\"Password\"},getFieldDecorator(\"password\",{rules:[{required:true,message:\"Please input your password!\"}]// initialValue: defaultPassword\n})(React.createElement(Input,{prefix:React.createElement(Icon,{type:\"lock\",style:{color:\"rgba(0,0,0,.25)\"}}),type:\"password\",placeholder:\"Password\",size:\"large\"// onChange={handlePasswordChange}\n}))),React.createElement(\"br\",null),React.createElement(Form.Item,null,React.createElement(Button,{type:\"primary\",htmlType:\"submit\",disabled:hasErrors(getFieldsError())||!isFieldTouched(\"email\")||!isFieldTouched(\"password\"),block:true// loading={loading}\n,size:\"large\"// tslint:disable-next-line jsx-no-lambda\n,onClick:function onClick(evt){// setLoading(true);\nevt.preventDefault();// onSubmit(email, password);\n_onSubmit(getFieldValue(\"email\"),getFieldValue(\"password\"));}},\"Log in\"))))));};var WrappedLoginForm=Form.create({name:\"login\"})(LoginForm);export default WrappedLoginForm;// // // import Login from 'ant-design-pro/lib/Login';\n// // import { Alert, Checkbox} from 'antd';\n// // import React from \"react\";\n// // // import {\n// // //   BrowserRouter as Router,\n// // //   Switch,\n// // //   Route,\n// // //   Link\n// // // } from \"react-router-dom\";\n// // import ReactDOM from 'react-dom';\n// // const { Tab, UserName, Password, Mobile, Captcha, Submit } = Login;\n// //\n// // class LoginDemo extends React.Component {\n// // // export default function Login() {\n// //   state = {\n// //     notice: '',\n// //     type: 'tab2',\n// //     autoLogin: true,\n// //   };\n// //   onSubmit = (err, values) => {\n// //     console.log('value collected ->', {\n// //       ...values,\n// //       autoLogin: this.state.autoLogin,\n// //     });\n// //     if (this.state.type === 'tab1') {\n// //       this.setState(\n// //         {\n// //           notice: '',\n// //         },\n// //         () => {\n// //           if (!err && (values.username !== 'admin' || values.password !== '888888')) {\n// //             setTimeout(() => {\n// //               this.setState({\n// //                 notice: 'The combination of username and password is incorrect!',\n// //               });\n// //             }, 500);\n// //           }\n// //         }\n// //       );\n// //     }\n// //   };\n// //   onTabChange = key => {\n// //     this.setState({\n// //       type: key,\n// //     });\n// //   };\n// //   changeAutoLogin = e => {\n// //     this.setState({\n// //       autoLogin: e.target.checked,\n// //     });\n// //   };\n// //   render() {\n// //     return (\n// //       <div className=\"login-warp\">\n// //         <Login\n// //           defaultActiveKey={this.state.type}\n// //           onTabChange={this.onTabChange}\n// //           onSubmit={this.onSubmit}\n// //         >\n// //           <Tab key=\"tab1\" tab=\"Account\">\n// //             {this.state.notice && (\n// //               <Alert\n// //                 style={{ marginBottom: 24 }}\n// //                 message={this.state.notice}\n// //                 type=\"error\"\n// //                 showIcon\n// //                 closable\n// //               />\n// //             )}\n// //             <UserName name=\"username\" />\n// //             <Password name=\"password\" />\n// //           </Tab>\n// //           <Tab key=\"tab2\" tab=\"Mobile\">\n// //             <Mobile name=\"mobile\" />\n// //             <Captcha onGetCaptcha={() => console.log('Get captcha!')} name=\"captcha\" />\n// //           </Tab>\n// //           <div>\n// //             <Checkbox checked={this.state.autoLogin} onChange={this.changeAutoLogin}>\n// //               Keep me logged in\n// //             </Checkbox>\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Forgot password\n// //             </a>\n// //           </div>\n// //           <Submit>Login</Submit>\n// //           <div>\n// //             Other login methods\n// //             <span className=\"icon icon-alipay\" />\n// //             <span className=\"icon icon-taobao\" />\n// //             <span className=\"icon icon-weibo\" />\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Register\n// //             </a>\n// //           </div>\n// //         </Login>\n// //       </div>\n// //     );\n// //   }\n// // }\n// //\n// // ReactDOM.render(<LoginDemo />);\n// // export default LoginDemo;\n// import ReactDOM from 'react-dom';\n// import React, { useState } from \"react\";\n// import {Form, Icon, Input, Button, Checkbox, Row, Col } from \"antd\";\n// //\n// // class NormalLoginForm extends React.Component {\n// //   const {\n// //       getFieldDecorator,\n// //       getFieldsError,\n// //       getFieldValue,\n// //       isFieldTouched\n// //   } = props.form;\n// //\n// //   handleSubmit = e => {\n// //     e.preventDefault();\n// //     this.props.form.validateFields((err, values) => {\n// //       if (!err) {\n// //         console.log('Received values of form: ', values);\n// //       }\n// //     });\n// //   };\n// //   // const {\n// //   //     getFieldDecorator,\n// //   //     getFieldsError,\n// //   //     getFieldValue,\n// //   //     isFieldTouched\n// //   // } = props.form;\n// //\n// //   render() {\n// //     const { getFieldDecorator } = this.props.form;\n// //     return (\n// //       <Form onSubmit={this.handleSubmit} className=\"login-form\">\n// //         <Form.Item>\n// //           {getFieldDecorator('username', {\n// //             rules: [{ required: true, message: 'Please input your username!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               placeholder=\"Username\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('password', {\n// //             rules: [{ required: true, message: 'Please input your Password!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               type=\"password\"\n// //               placeholder=\"Password\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('remember', {\n// //             valuePropName: 'checked',\n// //             initialValue: true,\n// //           })(<Checkbox>Remember me</Checkbox>)}\n// //           <a className=\"login-form-forgot\" href=\"\">\n// //             Forgot password\n// //           </a>\n// //           <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n// //             Log in\n// //           </Button>\n// //           Or <a href=\"\">register now!</a>\n// //         </Form.Item>\n// //       </Form>\n// //     );\n// //   }\n// // }\n// //\n// // const WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\n// //\n// // // ReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n// // export default NormalLoginForm;\n// // //\n// const LoginForm = props => {\n//   const defaultEmail = \"\";\n//   const defaultPassword = \"\";\n//   const [email, setEmail] = useState(defaultEmail);\n//   const [password, setPassword] = useState(defaultPassword);\n//\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   const {\n//     getFieldDecorator,\n//     getFieldsError,\n//     getFieldValue,\n//     isFieldTouched\n//   } = props.form;\n//\n//   function hasErrors(fieldsError) {\n//     return Object.keys(fieldsError).some(field => fieldsError[field]);\n//   }\n//\n//   const isLoginButtonDisabled =\n//     hasErrors(getFieldsError()) ||\n//     !isFieldTouched(\"email\") ||\n//     !isFieldTouched(\"password\");\n//\n//   const onSubmit = (email, password) => {\n//     setEmail(email);\n//     setPassword(password);\n//     setIsLoggedIn(true);\n//     console.log(email, password, isLoggedIn);\n//   };\n//\n//   const loginHeader = isLoggedIn ? (\n//     <h1 className=\"title\">Welcome Back</h1>\n//   ) : (\n//     <h1 className=\"title\">Log In/Sign Up Page</h1>\n//   );\n//\n//   return (\n//     <div>\n//       <style jsx={true}>{`\n//         .title {\n//           font-size: 50px;\n//           letter-spacing: normal;\n//           color: rgba(0, 0, 0, 0.85);\n//           margin: auto;\n//           text-align: center;\n//         }\n//       `}</style>\n//       <Row type=\"flex\" justify=\"center\">\n//         <Col span={4}>\n//         <div>helllo</div>\n//         </Col>\n//         <Col span={4}>\n//         <div>helllo2</div>\n//         </Col>\n//\n//       </Row>\n//       </div>\n//       // <Row type=\"flex\" justify=\"center\">\n//       //   <Col span={4} style={{ minWidth: \"320px\" }}>\n//       //     <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <div className=\"title\">{loginHeader}</div>\n//           // <br />\n//           // <br />\n//           // <Form\n//           //   // {...formProps}\n//           //   // className=\"login-form\"\n//           //   // layout={\"\"}\n//           //   // tslint:disable-next-line jsx-no-lambda\n//           //   onSubmit={evt => {\n//           //     if (!isLoginButtonDisabled) {\n//           //       // setLoading(true);\n//           //       evt.preventDefault();\n//           //       onSubmit(email, password);\n//           //     }\n//           //   }}\n//           // >\n//           //   <Form.Item label=\"Username\">\n//           //     {getFieldDecorator(\"username\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"username\"\n//           //         }\n//           //         // ,{\n//           //         //   type: \"username\",\n//           //         //   message: \"The input is not valid email!\"\n//           //         // }\n//           //       ]\n//           //       // initialValue: defaultEmail\n//           //     })(\n//           //       <Input\n//           //\n//           //         placeholder=\"username\"\n//           //         size=\"large\"\n//           //         // onChange={handleEmailChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <Form.Item label=\"Password\">\n//           //     {getFieldDecorator(\"password\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"password\"\n//           //         }\n//           //       ]\n//           //       // initialValue: defaultPassword\n//           //     })(\n//           //       <Input\n//           //\n//           //         type=\"password\"\n//           //         placeholder=\"Password\"\n//           //         size=\"large\"\n//           //         // onChange={handlePasswordChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <br />\n//           //   <Form.Item>\n//           //     <Button\n//           //       type=\"primary\"\n//           //       htmlType=\"submit\"\n//           //       disabled={\n//           //         hasErrors(getFieldsError()) ||\n//           //         !isFieldTouched(\"username\") ||\n//           //         !isFieldTouched(\"password\")\n//           //       }\n//           //       block={true}\n//           //       // loading={loading}\n//           //       size={\"large\"}\n//           //       // tslint:disable-next-line jsx-no-lambda\n//           //       onClick={evt => {\n//           //         // setLoading(true);\n//           //         evt.preventDefault();\n//           //         // onSubmit(email, password);\n//           //         onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n//           //       }}\n//           //     >\n//           //       Log in\n//           //     </Button>\n//           //   </Form.Item>\n//           // </Form>\n//       //     </Col>\n//       // </Row>\n//       // {/* <Link to=\"/register\">Sign Up</ Link>\n//     //  {/* <br />\n//     //  <br />\n//   //    Or <a href=\"/register\">register now!</a> */}\n//   //  </div>\n//   );\n// };\n//\n// const WrappedNormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\n// //\n// export default WrappedNormalLoginForm;","map":{"version":3,"sources":["/Users/themislee/Documents/redo/src/Login.js"],"names":["React","useState","Form","Input","Button","Row","Col","Icon","LoginForm","props","defaultEmail","defaultPassword","email","setEmail","password","setPassword","isLoggedIn","setIsLoggedIn","form","getFieldDecorator","getFieldsError","getFieldValue","isFieldTouched","hasErrors","fieldsError","Object","keys","some","field","isLoginButtonDisabled","onSubmit","console","log","loginHeader","minWidth","evt","preventDefault","rules","required","message","type","color","WrappedLoginForm","create","name"],"mappings":"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":["import React, { useState } from \"react\";\nimport { Form, Input, Button, Row, Col, Icon } from \"antd\";\n// import \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\n// import { createForm } from \"rc-form\";\n// import { useForm } from \"sunflower-antd\";\n\n// import { WrappedFormUtils } from \"antd/lib/form/Form\";\n\n// const LoginForm = props => {\n//   // const handleValuesChange = () => console.log('Value changes').\n//   // const form = useform({\n//   //   onValuesChange: handleValuesChange,\n//   // });\n//   const { getFieldDecorator, validateFields } = props.form;\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     validateFields((err, values) => {\n//       if (!err) {\n//         console.log(\"Received values of form: \", values);\n//       }\n//     });\n//   };\n//   return (\n//     <Form onSubmit={handleSubmit}>\n//       <FormItem>\n//         {getFieldDecorator(\"userName\")(<Input placeholder=\"Username\" />)}\n//       </FormItem>\n//     </Form>\n//   );\n// };\n// const { useForm } = Form;\n\nconst LoginForm = props => {\n  const defaultEmail = \"\";\n  const defaultPassword = \"\";\n  const [email, setEmail] = useState(defaultEmail);\n  const [password, setPassword] = useState(defaultPassword);\n  // const [loading, setLoading] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const { formProps } = useForm({ form });\n\n  // const handleEmailChange = value => {\n  //   setEmail(value);\n  // };\n\n  // const handlePasswordChange = value => {\n  //   setPassword(value);\n  // };\n\n  // const form = useForm({\n  //   // onValuesChcdange: onChangeBase\n  // });\n  // const { WrappedFormUtils } = props;\n  const {\n    getFieldDecorator,\n    getFieldsError,\n    getFieldValue,\n    isFieldTouched\n  } = props.form;\n\n  function hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n  }\n\n  const isLoginButtonDisabled =\n    hasErrors(getFieldsError()) ||\n    !isFieldTouched(\"email\") ||\n    !isFieldTouched(\"password\");\n\n  const onSubmit = (email, password) => {\n    setEmail(email);\n    setPassword(password);\n    setIsLoggedIn(true);\n    console.log(email, password, isLoggedIn);\n  };\n\n  const loginHeader = isLoggedIn ? (\n    <h1 className=\"title\">You Logged In</h1>\n  ) : (\n    <h1 className=\"title\">Please Log In</h1>\n  );\n\n  return (\n    <div>\n      <style jsx={true}>{`\n        .title {\n          font-family: Roboto;\n          font-size: 38px;\n          font-weight: bold;\n          font-style: normal;\n          font-stretch: normal;\n          line-height: 1.42;\n          letter-spacing: normal;\n          color: rgba(0, 0, 0, 0.85);\n          margin: auto;\n          text-align: center;\n        }\n      `}</style>\n      <Row type=\"flex\"justify=\"end\">\n        <Col offset={2} span={4} style={{ minWidth: \"320px\" }}>\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <div className=\"title\">{loginHeader}</div>\n          <br />\n          <br />\n          <Form\n            // {...formProps}\n            // className=\"login-form\"\n            layout={\"vertical\"}\n            // tslint:disable-next-line jsx-no-lambda\n            onSubmit={evt => {\n              if (!isLoginButtonDisabled) {\n                // setLoading(true);\n                evt.preventDefault();\n                onSubmit(email, password);\n              }\n            }}\n          >\n            <Form.Item label=\"Email\">\n              {getFieldDecorator(\"email\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your email!\"\n                  },\n                  {\n                    type: \"email\",\n                    message: \"The input is not valid email!\"\n                  }\n                ]\n                // initialValue: defaultEmail\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"mail\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  placeholder=\"Email\"\n                  size=\"large\"\n                  // onChange={handleEmailChange}\n                />\n              )}\n            </Form.Item>\n            <Form.Item label=\"Password\">\n              {getFieldDecorator(\"password\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your password!\"\n                  }\n                ]\n                // initialValue: defaultPassword\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  size=\"large\"\n                  // onChange={handlePasswordChange}\n                />\n              )}\n            </Form.Item>\n            <br />\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={\n                  hasErrors(getFieldsError()) ||\n                  !isFieldTouched(\"email\") ||\n                  !isFieldTouched(\"password\")\n                }\n                block={true}\n                // loading={loading}\n                size={\"large\"}\n                // tslint:disable-next-line jsx-no-lambda\n                onClick={evt => {\n                  // setLoading(true);\n                  evt.preventDefault();\n                  // onSubmit(email, password);\n                  onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n                }}\n              >\n                Log in\n              </Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n      {/* <Link to=\"/register\">Sign Up</ Link>\n      {/* <br />\n      <br />\n      Or <a href=\"/register\">register now!</a> */}\n    </div>\n  );\n};\n\nconst WrappedLoginForm = Form.create({ name: \"login\" })(LoginForm);\n\nexport default WrappedLoginForm;\n// // // import Login from 'ant-design-pro/lib/Login';\n// // import { Alert, Checkbox} from 'antd';\n// // import React from \"react\";\n// // // import {\n// // //   BrowserRouter as Router,\n// // //   Switch,\n// // //   Route,\n// // //   Link\n// // // } from \"react-router-dom\";\n// // import ReactDOM from 'react-dom';\n// // const { Tab, UserName, Password, Mobile, Captcha, Submit } = Login;\n// //\n// // class LoginDemo extends React.Component {\n// // // export default function Login() {\n// //   state = {\n// //     notice: '',\n// //     type: 'tab2',\n// //     autoLogin: true,\n// //   };\n// //   onSubmit = (err, values) => {\n// //     console.log('value collected ->', {\n// //       ...values,\n// //       autoLogin: this.state.autoLogin,\n// //     });\n// //     if (this.state.type === 'tab1') {\n// //       this.setState(\n// //         {\n// //           notice: '',\n// //         },\n// //         () => {\n// //           if (!err && (values.username !== 'admin' || values.password !== '888888')) {\n// //             setTimeout(() => {\n// //               this.setState({\n// //                 notice: 'The combination of username and password is incorrect!',\n// //               });\n// //             }, 500);\n// //           }\n// //         }\n// //       );\n// //     }\n// //   };\n// //   onTabChange = key => {\n// //     this.setState({\n// //       type: key,\n// //     });\n// //   };\n// //   changeAutoLogin = e => {\n// //     this.setState({\n// //       autoLogin: e.target.checked,\n// //     });\n// //   };\n// //   render() {\n// //     return (\n// //       <div className=\"login-warp\">\n// //         <Login\n// //           defaultActiveKey={this.state.type}\n// //           onTabChange={this.onTabChange}\n// //           onSubmit={this.onSubmit}\n// //         >\n// //           <Tab key=\"tab1\" tab=\"Account\">\n// //             {this.state.notice && (\n// //               <Alert\n// //                 style={{ marginBottom: 24 }}\n// //                 message={this.state.notice}\n// //                 type=\"error\"\n// //                 showIcon\n// //                 closable\n// //               />\n// //             )}\n// //             <UserName name=\"username\" />\n// //             <Password name=\"password\" />\n// //           </Tab>\n// //           <Tab key=\"tab2\" tab=\"Mobile\">\n// //             <Mobile name=\"mobile\" />\n// //             <Captcha onGetCaptcha={() => console.log('Get captcha!')} name=\"captcha\" />\n// //           </Tab>\n// //           <div>\n// //             <Checkbox checked={this.state.autoLogin} onChange={this.changeAutoLogin}>\n// //               Keep me logged in\n// //             </Checkbox>\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Forgot password\n// //             </a>\n// //           </div>\n// //           <Submit>Login</Submit>\n// //           <div>\n// //             Other login methods\n// //             <span className=\"icon icon-alipay\" />\n// //             <span className=\"icon icon-taobao\" />\n// //             <span className=\"icon icon-weibo\" />\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Register\n// //             </a>\n// //           </div>\n// //         </Login>\n// //       </div>\n// //     );\n// //   }\n// // }\n// //\n// // ReactDOM.render(<LoginDemo />);\n// // export default LoginDemo;\n// import ReactDOM from 'react-dom';\n// import React, { useState } from \"react\";\n// import {Form, Icon, Input, Button, Checkbox, Row, Col } from \"antd\";\n// //\n// // class NormalLoginForm extends React.Component {\n// //   const {\n// //       getFieldDecorator,\n// //       getFieldsError,\n// //       getFieldValue,\n// //       isFieldTouched\n// //   } = props.form;\n// //\n// //   handleSubmit = e => {\n// //     e.preventDefault();\n// //     this.props.form.validateFields((err, values) => {\n// //       if (!err) {\n// //         console.log('Received values of form: ', values);\n// //       }\n// //     });\n// //   };\n// //   // const {\n// //   //     getFieldDecorator,\n// //   //     getFieldsError,\n// //   //     getFieldValue,\n// //   //     isFieldTouched\n// //   // } = props.form;\n// //\n// //   render() {\n// //     const { getFieldDecorator } = this.props.form;\n// //     return (\n// //       <Form onSubmit={this.handleSubmit} className=\"login-form\">\n// //         <Form.Item>\n// //           {getFieldDecorator('username', {\n// //             rules: [{ required: true, message: 'Please input your username!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               placeholder=\"Username\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('password', {\n// //             rules: [{ required: true, message: 'Please input your Password!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               type=\"password\"\n// //               placeholder=\"Password\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('remember', {\n// //             valuePropName: 'checked',\n// //             initialValue: true,\n// //           })(<Checkbox>Remember me</Checkbox>)}\n// //           <a className=\"login-form-forgot\" href=\"\">\n// //             Forgot password\n// //           </a>\n// //           <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n// //             Log in\n// //           </Button>\n// //           Or <a href=\"\">register now!</a>\n// //         </Form.Item>\n// //       </Form>\n// //     );\n// //   }\n// // }\n// //\n// // const WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\n// //\n// // // ReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n// // export default NormalLoginForm;\n// // //\n// const LoginForm = props => {\n//   const defaultEmail = \"\";\n//   const defaultPassword = \"\";\n//   const [email, setEmail] = useState(defaultEmail);\n//   const [password, setPassword] = useState(defaultPassword);\n//\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   const {\n//     getFieldDecorator,\n//     getFieldsError,\n//     getFieldValue,\n//     isFieldTouched\n//   } = props.form;\n//\n//   function hasErrors(fieldsError) {\n//     return Object.keys(fieldsError).some(field => fieldsError[field]);\n//   }\n//\n//   const isLoginButtonDisabled =\n//     hasErrors(getFieldsError()) ||\n//     !isFieldTouched(\"email\") ||\n//     !isFieldTouched(\"password\");\n//\n//   const onSubmit = (email, password) => {\n//     setEmail(email);\n//     setPassword(password);\n//     setIsLoggedIn(true);\n//     console.log(email, password, isLoggedIn);\n//   };\n//\n//   const loginHeader = isLoggedIn ? (\n//     <h1 className=\"title\">Welcome Back</h1>\n//   ) : (\n//     <h1 className=\"title\">Log In/Sign Up Page</h1>\n//   );\n//\n//   return (\n//     <div>\n//       <style jsx={true}>{`\n//         .title {\n//           font-size: 50px;\n//           letter-spacing: normal;\n//           color: rgba(0, 0, 0, 0.85);\n//           margin: auto;\n//           text-align: center;\n//         }\n//       `}</style>\n//       <Row type=\"flex\" justify=\"center\">\n//         <Col span={4}>\n//         <div>helllo</div>\n//         </Col>\n//         <Col span={4}>\n//         <div>helllo2</div>\n//         </Col>\n//\n//       </Row>\n//       </div>\n//       // <Row type=\"flex\" justify=\"center\">\n//       //   <Col span={4} style={{ minWidth: \"320px\" }}>\n//       //     <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <div className=\"title\">{loginHeader}</div>\n//           // <br />\n//           // <br />\n//           // <Form\n//           //   // {...formProps}\n//           //   // className=\"login-form\"\n//           //   // layout={\"\"}\n//           //   // tslint:disable-next-line jsx-no-lambda\n//           //   onSubmit={evt => {\n//           //     if (!isLoginButtonDisabled) {\n//           //       // setLoading(true);\n//           //       evt.preventDefault();\n//           //       onSubmit(email, password);\n//           //     }\n//           //   }}\n//           // >\n//           //   <Form.Item label=\"Username\">\n//           //     {getFieldDecorator(\"username\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"username\"\n//           //         }\n//           //         // ,{\n//           //         //   type: \"username\",\n//           //         //   message: \"The input is not valid email!\"\n//           //         // }\n//           //       ]\n//           //       // initialValue: defaultEmail\n//           //     })(\n//           //       <Input\n//           //\n//           //         placeholder=\"username\"\n//           //         size=\"large\"\n//           //         // onChange={handleEmailChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <Form.Item label=\"Password\">\n//           //     {getFieldDecorator(\"password\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"password\"\n//           //         }\n//           //       ]\n//           //       // initialValue: defaultPassword\n//           //     })(\n//           //       <Input\n//           //\n//           //         type=\"password\"\n//           //         placeholder=\"Password\"\n//           //         size=\"large\"\n//           //         // onChange={handlePasswordChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <br />\n//           //   <Form.Item>\n//           //     <Button\n//           //       type=\"primary\"\n//           //       htmlType=\"submit\"\n//           //       disabled={\n//           //         hasErrors(getFieldsError()) ||\n//           //         !isFieldTouched(\"username\") ||\n//           //         !isFieldTouched(\"password\")\n//           //       }\n//           //       block={true}\n//           //       // loading={loading}\n//           //       size={\"large\"}\n//           //       // tslint:disable-next-line jsx-no-lambda\n//           //       onClick={evt => {\n//           //         // setLoading(true);\n//           //         evt.preventDefault();\n//           //         // onSubmit(email, password);\n//           //         onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n//           //       }}\n//           //     >\n//           //       Log in\n//           //     </Button>\n//           //   </Form.Item>\n//           // </Form>\n//       //     </Col>\n//       // </Row>\n//       // {/* <Link to=\"/register\">Sign Up</ Link>\n//     //  {/* <br />\n//     //  <br />\n//   //    Or <a href=\"/register\">register now!</a> */}\n//   //  </div>\n//   );\n// };\n//\n// const WrappedNormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\n// //\n// export default WrappedNormalLoginForm;\n"]},"metadata":{},"sourceType":"module"}