{"ast":null,"code":"var _jsxFileName = \"/Users/themislee/Documents/redo/src/Login.js\";\nimport React, { useState } from \"react\";\nimport { Form, Input, Button, Row, Col, Icon } from \"antd\"; // import \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n// import { createForm } from \"rc-form\";\n// import { useForm } from \"sunflower-antd\";\n// import { WrappedFormUtils } from \"antd/lib/form/Form\";\n// const LoginForm = props => {\n//   // const handleValuesChange = () => console.log('Value changes').\n//   // const form = useform({\n//   //   onValuesChange: handleValuesChange,\n//   // });\n//   const { getFieldDecorator, validateFields } = props.form;\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     validateFields((err, values) => {\n//       if (!err) {\n//         console.log(\"Received values of form: \", values);\n//       }\n//     });\n//   };\n//   return (\n//     <Form onSubmit={handleSubmit}>\n//       <FormItem>\n//         {getFieldDecorator(\"userName\")(<Input placeholder=\"Username\" />)}\n//       </FormItem>\n//     </Form>\n//   );\n// };\n// const { useForm } = Form;\n\nconst LoginForm = props => {\n  const defaultEmail = \"\";\n  const defaultPassword = \"\";\n  const [email, setEmail] = useState(defaultEmail);\n  const [password, setPassword] = useState(defaultPassword); // const [loading, setLoading] = useState(false);\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // const { formProps } = useForm({ form });\n  // const handleEmailChange = value => {\n  //   setEmail(value);\n  // };\n  // const handlePasswordChange = value => {\n  //   setPassword(value);\n  // };\n  // const form = useForm({\n  //   // onValuesChcdange: onChangeBase\n  // });\n  // const { WrappedFormUtils } = props;\n\n  const {\n    getFieldDecorator,\n    getFieldsError,\n    getFieldValue,\n    isFieldTouched\n  } = props.form;\n\n  function hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n  }\n\n  const isLoginButtonDisabled = hasErrors(getFieldsError()) || !isFieldTouched(\"email\") || !isFieldTouched(\"password\");\n\n  const onSubmit = (email, password) => {\n    setEmail(email);\n    setPassword(password);\n    setIsLoggedIn(true);\n    console.log(email, password, isLoggedIn);\n  };\n\n  const loginHeader = isLoggedIn ? React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"You Logged In\") : React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Please Log In\");\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"style\", {\n    jsx: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, `\n        .title {\n          font-family: Roboto;\n          font-size: 38px;\n          font-weight: bold;\n          font-style: normal;\n          font-stretch: normal;\n          line-height: 1.42;\n          letter-spacing: normal;\n          color: rgba(0, 0, 0, 0.85);\n          margin: auto;\n          text-align: center;\n        }\n      `), React.createElement(Row, {\n    type: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Col, {\n    span: 4,\n    style: {\n      minWidth: \"320px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, loginHeader), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Form // {...formProps}\n  // className=\"login-form\"\n  , {\n    layout: \"vertical\" // tslint:disable-next-line jsx-no-lambda\n    ,\n    onSubmit: evt => {\n      if (!isLoginButtonDisabled) {\n        // setLoading(true);\n        evt.preventDefault();\n        onSubmit(email, password);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Form.Item, {\n    label: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, getFieldDecorator(\"email\", {\n    rules: [{\n      required: true,\n      message: \"Please input your email!\"\n    }, {\n      type: \"email\",\n      message: \"The input is not valid email!\"\n    }] // initialValue: defaultEmail\n\n  })(React.createElement(Input, {\n    prefix: React.createElement(Icon, {\n      type: \"mail\",\n      style: {\n        color: \"rgba(0,0,0,.25)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }),\n    placeholder: \"Email\",\n    size: \"large\" // onChange={handleEmailChange}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    label: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, getFieldDecorator(\"password\", {\n    rules: [{\n      required: true,\n      message: \"Please input your password!\"\n    }] // initialValue: defaultPassword\n\n  })(React.createElement(Input, {\n    prefix: React.createElement(Icon, {\n      type: \"lock\",\n      style: {\n        color: \"rgba(0,0,0,.25)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }),\n    type: \"password\",\n    placeholder: \"Password\",\n    size: \"large\" // onChange={handlePasswordChange}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: hasErrors(getFieldsError()) || !isFieldTouched(\"email\") || !isFieldTouched(\"password\"),\n    block: true // loading={loading}\n    ,\n    size: \"large\" // tslint:disable-next-line jsx-no-lambda\n    ,\n    onClick: evt => {\n      // setLoading(true);\n      evt.preventDefault(); // onSubmit(email, password);\n\n      onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Log in\"))))));\n};\n\nconst WrappedLoginForm = Form.create({\n  name: \"login\"\n})(LoginForm);\nexport default WrappedLoginForm; // // // import Login from 'ant-design-pro/lib/Login';\n// // import { Alert, Checkbox} from 'antd';\n// // import React from \"react\";\n// // // import {\n// // //   BrowserRouter as Router,\n// // //   Switch,\n// // //   Route,\n// // //   Link\n// // // } from \"react-router-dom\";\n// // import ReactDOM from 'react-dom';\n// // const { Tab, UserName, Password, Mobile, Captcha, Submit } = Login;\n// //\n// // class LoginDemo extends React.Component {\n// // // export default function Login() {\n// //   state = {\n// //     notice: '',\n// //     type: 'tab2',\n// //     autoLogin: true,\n// //   };\n// //   onSubmit = (err, values) => {\n// //     console.log('value collected ->', {\n// //       ...values,\n// //       autoLogin: this.state.autoLogin,\n// //     });\n// //     if (this.state.type === 'tab1') {\n// //       this.setState(\n// //         {\n// //           notice: '',\n// //         },\n// //         () => {\n// //           if (!err && (values.username !== 'admin' || values.password !== '888888')) {\n// //             setTimeout(() => {\n// //               this.setState({\n// //                 notice: 'The combination of username and password is incorrect!',\n// //               });\n// //             }, 500);\n// //           }\n// //         }\n// //       );\n// //     }\n// //   };\n// //   onTabChange = key => {\n// //     this.setState({\n// //       type: key,\n// //     });\n// //   };\n// //   changeAutoLogin = e => {\n// //     this.setState({\n// //       autoLogin: e.target.checked,\n// //     });\n// //   };\n// //   render() {\n// //     return (\n// //       <div className=\"login-warp\">\n// //         <Login\n// //           defaultActiveKey={this.state.type}\n// //           onTabChange={this.onTabChange}\n// //           onSubmit={this.onSubmit}\n// //         >\n// //           <Tab key=\"tab1\" tab=\"Account\">\n// //             {this.state.notice && (\n// //               <Alert\n// //                 style={{ marginBottom: 24 }}\n// //                 message={this.state.notice}\n// //                 type=\"error\"\n// //                 showIcon\n// //                 closable\n// //               />\n// //             )}\n// //             <UserName name=\"username\" />\n// //             <Password name=\"password\" />\n// //           </Tab>\n// //           <Tab key=\"tab2\" tab=\"Mobile\">\n// //             <Mobile name=\"mobile\" />\n// //             <Captcha onGetCaptcha={() => console.log('Get captcha!')} name=\"captcha\" />\n// //           </Tab>\n// //           <div>\n// //             <Checkbox checked={this.state.autoLogin} onChange={this.changeAutoLogin}>\n// //               Keep me logged in\n// //             </Checkbox>\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Forgot password\n// //             </a>\n// //           </div>\n// //           <Submit>Login</Submit>\n// //           <div>\n// //             Other login methods\n// //             <span className=\"icon icon-alipay\" />\n// //             <span className=\"icon icon-taobao\" />\n// //             <span className=\"icon icon-weibo\" />\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Register\n// //             </a>\n// //           </div>\n// //         </Login>\n// //       </div>\n// //     );\n// //   }\n// // }\n// //\n// // ReactDOM.render(<LoginDemo />);\n// // export default LoginDemo;\n// import ReactDOM from 'react-dom';\n// import React, { useState } from \"react\";\n// import {Form, Icon, Input, Button, Checkbox, Row, Col } from \"antd\";\n// //\n// // class NormalLoginForm extends React.Component {\n// //   const {\n// //       getFieldDecorator,\n// //       getFieldsError,\n// //       getFieldValue,\n// //       isFieldTouched\n// //   } = props.form;\n// //\n// //   handleSubmit = e => {\n// //     e.preventDefault();\n// //     this.props.form.validateFields((err, values) => {\n// //       if (!err) {\n// //         console.log('Received values of form: ', values);\n// //       }\n// //     });\n// //   };\n// //   // const {\n// //   //     getFieldDecorator,\n// //   //     getFieldsError,\n// //   //     getFieldValue,\n// //   //     isFieldTouched\n// //   // } = props.form;\n// //\n// //   render() {\n// //     const { getFieldDecorator } = this.props.form;\n// //     return (\n// //       <Form onSubmit={this.handleSubmit} className=\"login-form\">\n// //         <Form.Item>\n// //           {getFieldDecorator('username', {\n// //             rules: [{ required: true, message: 'Please input your username!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               placeholder=\"Username\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('password', {\n// //             rules: [{ required: true, message: 'Please input your Password!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               type=\"password\"\n// //               placeholder=\"Password\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('remember', {\n// //             valuePropName: 'checked',\n// //             initialValue: true,\n// //           })(<Checkbox>Remember me</Checkbox>)}\n// //           <a className=\"login-form-forgot\" href=\"\">\n// //             Forgot password\n// //           </a>\n// //           <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n// //             Log in\n// //           </Button>\n// //           Or <a href=\"\">register now!</a>\n// //         </Form.Item>\n// //       </Form>\n// //     );\n// //   }\n// // }\n// //\n// // const WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\n// //\n// // // ReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n// // export default NormalLoginForm;\n// // //\n// const LoginForm = props => {\n//   const defaultEmail = \"\";\n//   const defaultPassword = \"\";\n//   const [email, setEmail] = useState(defaultEmail);\n//   const [password, setPassword] = useState(defaultPassword);\n//\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   const {\n//     getFieldDecorator,\n//     getFieldsError,\n//     getFieldValue,\n//     isFieldTouched\n//   } = props.form;\n//\n//   function hasErrors(fieldsError) {\n//     return Object.keys(fieldsError).some(field => fieldsError[field]);\n//   }\n//\n//   const isLoginButtonDisabled =\n//     hasErrors(getFieldsError()) ||\n//     !isFieldTouched(\"email\") ||\n//     !isFieldTouched(\"password\");\n//\n//   const onSubmit = (email, password) => {\n//     setEmail(email);\n//     setPassword(password);\n//     setIsLoggedIn(true);\n//     console.log(email, password, isLoggedIn);\n//   };\n//\n//   const loginHeader = isLoggedIn ? (\n//     <h1 className=\"title\">Welcome Back</h1>\n//   ) : (\n//     <h1 className=\"title\">Log In/Sign Up Page</h1>\n//   );\n//\n//   return (\n//     <div>\n//       <style jsx={true}>{`\n//         .title {\n//           font-size: 50px;\n//           letter-spacing: normal;\n//           color: rgba(0, 0, 0, 0.85);\n//           margin: auto;\n//           text-align: center;\n//         }\n//       `}</style>\n//       <Row type=\"flex\" justify=\"center\">\n//         <Col span={4}>\n//         <div>helllo</div>\n//         </Col>\n//         <Col span={4}>\n//         <div>helllo2</div>\n//         </Col>\n//\n//       </Row>\n//       </div>\n//       // <Row type=\"flex\" justify=\"center\">\n//       //   <Col span={4} style={{ minWidth: \"320px\" }}>\n//       //     <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <div className=\"title\">{loginHeader}</div>\n//           // <br />\n//           // <br />\n//           // <Form\n//           //   // {...formProps}\n//           //   // className=\"login-form\"\n//           //   // layout={\"\"}\n//           //   // tslint:disable-next-line jsx-no-lambda\n//           //   onSubmit={evt => {\n//           //     if (!isLoginButtonDisabled) {\n//           //       // setLoading(true);\n//           //       evt.preventDefault();\n//           //       onSubmit(email, password);\n//           //     }\n//           //   }}\n//           // >\n//           //   <Form.Item label=\"Username\">\n//           //     {getFieldDecorator(\"username\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"username\"\n//           //         }\n//           //         // ,{\n//           //         //   type: \"username\",\n//           //         //   message: \"The input is not valid email!\"\n//           //         // }\n//           //       ]\n//           //       // initialValue: defaultEmail\n//           //     })(\n//           //       <Input\n//           //\n//           //         placeholder=\"username\"\n//           //         size=\"large\"\n//           //         // onChange={handleEmailChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <Form.Item label=\"Password\">\n//           //     {getFieldDecorator(\"password\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"password\"\n//           //         }\n//           //       ]\n//           //       // initialValue: defaultPassword\n//           //     })(\n//           //       <Input\n//           //\n//           //         type=\"password\"\n//           //         placeholder=\"Password\"\n//           //         size=\"large\"\n//           //         // onChange={handlePasswordChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <br />\n//           //   <Form.Item>\n//           //     <Button\n//           //       type=\"primary\"\n//           //       htmlType=\"submit\"\n//           //       disabled={\n//           //         hasErrors(getFieldsError()) ||\n//           //         !isFieldTouched(\"username\") ||\n//           //         !isFieldTouched(\"password\")\n//           //       }\n//           //       block={true}\n//           //       // loading={loading}\n//           //       size={\"large\"}\n//           //       // tslint:disable-next-line jsx-no-lambda\n//           //       onClick={evt => {\n//           //         // setLoading(true);\n//           //         evt.preventDefault();\n//           //         // onSubmit(email, password);\n//           //         onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n//           //       }}\n//           //     >\n//           //       Log in\n//           //     </Button>\n//           //   </Form.Item>\n//           // </Form>\n//       //     </Col>\n//       // </Row>\n//       // {/* <Link to=\"/register\">Sign Up</ Link>\n//     //  {/* <br />\n//     //  <br />\n//   //    Or <a href=\"/register\">register now!</a> */}\n//   //  </div>\n//   );\n// };\n//\n// const WrappedNormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\n// //\n// export default WrappedNormalLoginForm;","map":{"version":3,"sources":["/Users/themislee/Documents/redo/src/Login.js"],"names":["React","useState","Form","Input","Button","Row","Col","Icon","LoginForm","props","defaultEmail","defaultPassword","email","setEmail","password","setPassword","isLoggedIn","setIsLoggedIn","getFieldDecorator","getFieldsError","getFieldValue","isFieldTouched","form","hasErrors","fieldsError","Object","keys","some","field","isLoginButtonDisabled","onSubmit","console","log","loginHeader","minWidth","evt","preventDefault","rules","required","message","type","color","WrappedLoginForm","create","name"],"mappings":"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":["import React, { useState } from \"react\";\nimport { Form, Input, Button, Row, Col, Icon } from \"antd\";\n// import \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\n// import { createForm } from \"rc-form\";\n// import { useForm } from \"sunflower-antd\";\n\n// import { WrappedFormUtils } from \"antd/lib/form/Form\";\n\n// const LoginForm = props => {\n//   // const handleValuesChange = () => console.log('Value changes').\n//   // const form = useform({\n//   //   onValuesChange: handleValuesChange,\n//   // });\n//   const { getFieldDecorator, validateFields } = props.form;\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     validateFields((err, values) => {\n//       if (!err) {\n//         console.log(\"Received values of form: \", values);\n//       }\n//     });\n//   };\n//   return (\n//     <Form onSubmit={handleSubmit}>\n//       <FormItem>\n//         {getFieldDecorator(\"userName\")(<Input placeholder=\"Username\" />)}\n//       </FormItem>\n//     </Form>\n//   );\n// };\n// const { useForm } = Form;\n\nconst LoginForm = props => {\n  const defaultEmail = \"\";\n  const defaultPassword = \"\";\n  const [email, setEmail] = useState(defaultEmail);\n  const [password, setPassword] = useState(defaultPassword);\n  // const [loading, setLoading] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const { formProps } = useForm({ form });\n\n  // const handleEmailChange = value => {\n  //   setEmail(value);\n  // };\n\n  // const handlePasswordChange = value => {\n  //   setPassword(value);\n  // };\n\n  // const form = useForm({\n  //   // onValuesChcdange: onChangeBase\n  // });\n  // const { WrappedFormUtils } = props;\n  const {\n    getFieldDecorator,\n    getFieldsError,\n    getFieldValue,\n    isFieldTouched\n  } = props.form;\n\n  function hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n  }\n\n  const isLoginButtonDisabled =\n    hasErrors(getFieldsError()) ||\n    !isFieldTouched(\"email\") ||\n    !isFieldTouched(\"password\");\n\n  const onSubmit = (email, password) => {\n    setEmail(email);\n    setPassword(password);\n    setIsLoggedIn(true);\n    console.log(email, password, isLoggedIn);\n  };\n\n  const loginHeader = isLoggedIn ? (\n    <h1 className=\"title\">You Logged In</h1>\n  ) : (\n    <h1 className=\"title\">Please Log In</h1>\n  );\n\n  return (\n    <div>\n      <style jsx={true}>{`\n        .title {\n          font-family: Roboto;\n          font-size: 38px;\n          font-weight: bold;\n          font-style: normal;\n          font-stretch: normal;\n          line-height: 1.42;\n          letter-spacing: normal;\n          color: rgba(0, 0, 0, 0.85);\n          margin: auto;\n          text-align: center;\n        }\n      `}</style>\n      <Row type=\"flex\">\n        <Col span={4} style={{ minWidth: \"320px\" }}>\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <div className=\"title\">{loginHeader}</div>\n          <br />\n          <br />\n          <Form\n            // {...formProps}\n            // className=\"login-form\"\n            layout={\"vertical\"}\n            // tslint:disable-next-line jsx-no-lambda\n            onSubmit={evt => {\n              if (!isLoginButtonDisabled) {\n                // setLoading(true);\n                evt.preventDefault();\n                onSubmit(email, password);\n              }\n            }}\n          >\n            <Form.Item label=\"Email\">\n              {getFieldDecorator(\"email\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your email!\"\n                  },\n                  {\n                    type: \"email\",\n                    message: \"The input is not valid email!\"\n                  }\n                ]\n                // initialValue: defaultEmail\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"mail\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  placeholder=\"Email\"\n                  size=\"large\"\n                  // onChange={handleEmailChange}\n                />\n              )}\n            </Form.Item>\n            <Form.Item label=\"Password\">\n              {getFieldDecorator(\"password\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your password!\"\n                  }\n                ]\n                // initialValue: defaultPassword\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  size=\"large\"\n                  // onChange={handlePasswordChange}\n                />\n              )}\n            </Form.Item>\n            <br />\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={\n                  hasErrors(getFieldsError()) ||\n                  !isFieldTouched(\"email\") ||\n                  !isFieldTouched(\"password\")\n                }\n                block={true}\n                // loading={loading}\n                size={\"large\"}\n                // tslint:disable-next-line jsx-no-lambda\n                onClick={evt => {\n                  // setLoading(true);\n                  evt.preventDefault();\n                  // onSubmit(email, password);\n                  onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n                }}\n              >\n                Log in\n              </Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n      {/* <Link to=\"/register\">Sign Up</ Link>\n      {/* <br />\n      <br />\n      Or <a href=\"/register\">register now!</a> */}\n    </div>\n  );\n};\n\nconst WrappedLoginForm = Form.create({ name: \"login\" })(LoginForm);\n\nexport default WrappedLoginForm;\n// // // import Login from 'ant-design-pro/lib/Login';\n// // import { Alert, Checkbox} from 'antd';\n// // import React from \"react\";\n// // // import {\n// // //   BrowserRouter as Router,\n// // //   Switch,\n// // //   Route,\n// // //   Link\n// // // } from \"react-router-dom\";\n// // import ReactDOM from 'react-dom';\n// // const { Tab, UserName, Password, Mobile, Captcha, Submit } = Login;\n// //\n// // class LoginDemo extends React.Component {\n// // // export default function Login() {\n// //   state = {\n// //     notice: '',\n// //     type: 'tab2',\n// //     autoLogin: true,\n// //   };\n// //   onSubmit = (err, values) => {\n// //     console.log('value collected ->', {\n// //       ...values,\n// //       autoLogin: this.state.autoLogin,\n// //     });\n// //     if (this.state.type === 'tab1') {\n// //       this.setState(\n// //         {\n// //           notice: '',\n// //         },\n// //         () => {\n// //           if (!err && (values.username !== 'admin' || values.password !== '888888')) {\n// //             setTimeout(() => {\n// //               this.setState({\n// //                 notice: 'The combination of username and password is incorrect!',\n// //               });\n// //             }, 500);\n// //           }\n// //         }\n// //       );\n// //     }\n// //   };\n// //   onTabChange = key => {\n// //     this.setState({\n// //       type: key,\n// //     });\n// //   };\n// //   changeAutoLogin = e => {\n// //     this.setState({\n// //       autoLogin: e.target.checked,\n// //     });\n// //   };\n// //   render() {\n// //     return (\n// //       <div className=\"login-warp\">\n// //         <Login\n// //           defaultActiveKey={this.state.type}\n// //           onTabChange={this.onTabChange}\n// //           onSubmit={this.onSubmit}\n// //         >\n// //           <Tab key=\"tab1\" tab=\"Account\">\n// //             {this.state.notice && (\n// //               <Alert\n// //                 style={{ marginBottom: 24 }}\n// //                 message={this.state.notice}\n// //                 type=\"error\"\n// //                 showIcon\n// //                 closable\n// //               />\n// //             )}\n// //             <UserName name=\"username\" />\n// //             <Password name=\"password\" />\n// //           </Tab>\n// //           <Tab key=\"tab2\" tab=\"Mobile\">\n// //             <Mobile name=\"mobile\" />\n// //             <Captcha onGetCaptcha={() => console.log('Get captcha!')} name=\"captcha\" />\n// //           </Tab>\n// //           <div>\n// //             <Checkbox checked={this.state.autoLogin} onChange={this.changeAutoLogin}>\n// //               Keep me logged in\n// //             </Checkbox>\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Forgot password\n// //             </a>\n// //           </div>\n// //           <Submit>Login</Submit>\n// //           <div>\n// //             Other login methods\n// //             <span className=\"icon icon-alipay\" />\n// //             <span className=\"icon icon-taobao\" />\n// //             <span className=\"icon icon-weibo\" />\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Register\n// //             </a>\n// //           </div>\n// //         </Login>\n// //       </div>\n// //     );\n// //   }\n// // }\n// //\n// // ReactDOM.render(<LoginDemo />);\n// // export default LoginDemo;\n// import ReactDOM from 'react-dom';\n// import React, { useState } from \"react\";\n// import {Form, Icon, Input, Button, Checkbox, Row, Col } from \"antd\";\n// //\n// // class NormalLoginForm extends React.Component {\n// //   const {\n// //       getFieldDecorator,\n// //       getFieldsError,\n// //       getFieldValue,\n// //       isFieldTouched\n// //   } = props.form;\n// //\n// //   handleSubmit = e => {\n// //     e.preventDefault();\n// //     this.props.form.validateFields((err, values) => {\n// //       if (!err) {\n// //         console.log('Received values of form: ', values);\n// //       }\n// //     });\n// //   };\n// //   // const {\n// //   //     getFieldDecorator,\n// //   //     getFieldsError,\n// //   //     getFieldValue,\n// //   //     isFieldTouched\n// //   // } = props.form;\n// //\n// //   render() {\n// //     const { getFieldDecorator } = this.props.form;\n// //     return (\n// //       <Form onSubmit={this.handleSubmit} className=\"login-form\">\n// //         <Form.Item>\n// //           {getFieldDecorator('username', {\n// //             rules: [{ required: true, message: 'Please input your username!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               placeholder=\"Username\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('password', {\n// //             rules: [{ required: true, message: 'Please input your Password!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               type=\"password\"\n// //               placeholder=\"Password\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('remember', {\n// //             valuePropName: 'checked',\n// //             initialValue: true,\n// //           })(<Checkbox>Remember me</Checkbox>)}\n// //           <a className=\"login-form-forgot\" href=\"\">\n// //             Forgot password\n// //           </a>\n// //           <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n// //             Log in\n// //           </Button>\n// //           Or <a href=\"\">register now!</a>\n// //         </Form.Item>\n// //       </Form>\n// //     );\n// //   }\n// // }\n// //\n// // const WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\n// //\n// // // ReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n// // export default NormalLoginForm;\n// // //\n// const LoginForm = props => {\n//   const defaultEmail = \"\";\n//   const defaultPassword = \"\";\n//   const [email, setEmail] = useState(defaultEmail);\n//   const [password, setPassword] = useState(defaultPassword);\n//\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   const {\n//     getFieldDecorator,\n//     getFieldsError,\n//     getFieldValue,\n//     isFieldTouched\n//   } = props.form;\n//\n//   function hasErrors(fieldsError) {\n//     return Object.keys(fieldsError).some(field => fieldsError[field]);\n//   }\n//\n//   const isLoginButtonDisabled =\n//     hasErrors(getFieldsError()) ||\n//     !isFieldTouched(\"email\") ||\n//     !isFieldTouched(\"password\");\n//\n//   const onSubmit = (email, password) => {\n//     setEmail(email);\n//     setPassword(password);\n//     setIsLoggedIn(true);\n//     console.log(email, password, isLoggedIn);\n//   };\n//\n//   const loginHeader = isLoggedIn ? (\n//     <h1 className=\"title\">Welcome Back</h1>\n//   ) : (\n//     <h1 className=\"title\">Log In/Sign Up Page</h1>\n//   );\n//\n//   return (\n//     <div>\n//       <style jsx={true}>{`\n//         .title {\n//           font-size: 50px;\n//           letter-spacing: normal;\n//           color: rgba(0, 0, 0, 0.85);\n//           margin: auto;\n//           text-align: center;\n//         }\n//       `}</style>\n//       <Row type=\"flex\" justify=\"center\">\n//         <Col span={4}>\n//         <div>helllo</div>\n//         </Col>\n//         <Col span={4}>\n//         <div>helllo2</div>\n//         </Col>\n//\n//       </Row>\n//       </div>\n//       // <Row type=\"flex\" justify=\"center\">\n//       //   <Col span={4} style={{ minWidth: \"320px\" }}>\n//       //     <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <div className=\"title\">{loginHeader}</div>\n//           // <br />\n//           // <br />\n//           // <Form\n//           //   // {...formProps}\n//           //   // className=\"login-form\"\n//           //   // layout={\"\"}\n//           //   // tslint:disable-next-line jsx-no-lambda\n//           //   onSubmit={evt => {\n//           //     if (!isLoginButtonDisabled) {\n//           //       // setLoading(true);\n//           //       evt.preventDefault();\n//           //       onSubmit(email, password);\n//           //     }\n//           //   }}\n//           // >\n//           //   <Form.Item label=\"Username\">\n//           //     {getFieldDecorator(\"username\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"username\"\n//           //         }\n//           //         // ,{\n//           //         //   type: \"username\",\n//           //         //   message: \"The input is not valid email!\"\n//           //         // }\n//           //       ]\n//           //       // initialValue: defaultEmail\n//           //     })(\n//           //       <Input\n//           //\n//           //         placeholder=\"username\"\n//           //         size=\"large\"\n//           //         // onChange={handleEmailChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <Form.Item label=\"Password\">\n//           //     {getFieldDecorator(\"password\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"password\"\n//           //         }\n//           //       ]\n//           //       // initialValue: defaultPassword\n//           //     })(\n//           //       <Input\n//           //\n//           //         type=\"password\"\n//           //         placeholder=\"Password\"\n//           //         size=\"large\"\n//           //         // onChange={handlePasswordChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <br />\n//           //   <Form.Item>\n//           //     <Button\n//           //       type=\"primary\"\n//           //       htmlType=\"submit\"\n//           //       disabled={\n//           //         hasErrors(getFieldsError()) ||\n//           //         !isFieldTouched(\"username\") ||\n//           //         !isFieldTouched(\"password\")\n//           //       }\n//           //       block={true}\n//           //       // loading={loading}\n//           //       size={\"large\"}\n//           //       // tslint:disable-next-line jsx-no-lambda\n//           //       onClick={evt => {\n//           //         // setLoading(true);\n//           //         evt.preventDefault();\n//           //         // onSubmit(email, password);\n//           //         onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n//           //       }}\n//           //     >\n//           //       Log in\n//           //     </Button>\n//           //   </Form.Item>\n//           // </Form>\n//       //     </Col>\n//       // </Row>\n//       // {/* <Link to=\"/register\">Sign Up</ Link>\n//     //  {/* <br />\n//     //  <br />\n//   //    Or <a href=\"/register\">register now!</a> */}\n//   //  </div>\n//   );\n// };\n//\n// const WrappedNormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\n// //\n// export default WrappedNormalLoginForm;\n"]},"metadata":{},"sourceType":"module"}