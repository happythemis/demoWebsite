{"version":3,"sources":["List.js","Login.js","SignIn.js","serviceWorker.js","index.js","App.js"],"names":["List","className","Form","create","name","props","useState","email","setEmail","password","setPassword","isLoggedIn","setIsLoggedIn","form","getFieldDecorator","getFieldsError","getFieldValue","isFieldTouched","hasErrors","fieldsError","Object","keys","some","field","isLoginButtonDisabled","onSubmit","console","log","loginHeader","jsx","type","justify","offset","span","style","minWidth","layout","evt","preventDefault","Item","label","rules","required","message","prefix","color","placeholder","size","htmlType","disabled","block","onClick","Copyright","Typography","variant","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","width","submit","SignIn","classes","Container","component","maxWidth","CssBaseline","Avatar","noValidate","TextField","fullWidth","id","autoComplete","autoFocus","FormControlLabel","control","Checkbox","value","Button","Grid","container","item","xs","Box","mt","Boolean","window","location","hostname","match","ReactDOM","render","to","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.31feeea1.chunk.js","sourcesContent":["import React , {Component} from 'react';\n// import logo from './logo.svg';\nimport ReactDOM from 'react-dom';\nimport './List.module.css';\n\nexport default function List(){\n  return (\n    <nav className = \"ListNav\">\n      <h2>JL Tms</h2>\n      <ui>\n        <li>Todo</li>\n        <li>Gallery</li>\n      </ui>\n    </nav>\n    // <div className=\"List\">\n    //   <h1>hey2</h1>\n    // </div>\n  )\n\n\n}\n\n// export default List;\n","import React, { useState } from \"react\";\nimport { Form, Input, Button, Row, Col, Icon } from \"antd\";\n// import \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\n// import { createForm } from \"rc-form\";\n// import { useForm } from \"sunflower-antd\";\n\n// import { WrappedFormUtils } from \"antd/lib/form/Form\";\n\n// const LoginForm = props => {\n//   // const handleValuesChange = () => console.log('Value changes').\n//   // const form = useform({\n//   //   onValuesChange: handleValuesChange,\n//   // });\n//   const { getFieldDecorator, validateFields } = props.form;\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     validateFields((err, values) => {\n//       if (!err) {\n//         console.log(\"Received values of form: \", values);\n//       }\n//     });\n//   };\n//   return (\n//     <Form onSubmit={handleSubmit}>\n//       <FormItem>\n//         {getFieldDecorator(\"userName\")(<Input placeholder=\"Username\" />)}\n//       </FormItem>\n//     </Form>\n//   );\n// };\n// const { useForm } = Form;\n\nconst LoginForm = props => {\n  const defaultEmail = \"\";\n  const defaultPassword = \"\";\n  const [email, setEmail] = useState(defaultEmail);\n  const [password, setPassword] = useState(defaultPassword);\n  // const [loading, setLoading] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const { formProps } = useForm({ form });\n\n  // const handleEmailChange = value => {\n  //   setEmail(value);\n  // };\n\n  // const handlePasswordChange = value => {\n  //   setPassword(value);\n  // };\n\n  // const form = useForm({\n  //   // onValuesChcdange: onChangeBase\n  // });\n  // const { WrappedFormUtils } = props;\n  const {\n    getFieldDecorator,\n    getFieldsError,\n    getFieldValue,\n    isFieldTouched\n  } = props.form;\n\n  function hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n  }\n\n  const isLoginButtonDisabled =\n    hasErrors(getFieldsError()) ||\n    !isFieldTouched(\"email\") ||\n    !isFieldTouched(\"password\");\n\n  const onSubmit = (email, password) => {\n    setEmail(email);\n    setPassword(password);\n    setIsLoggedIn(true);\n    console.log(email, password, isLoggedIn);\n  };\n\n  const loginHeader = isLoggedIn ? (\n    <h1 className=\"title\">You Logged In</h1>\n  ) : (\n    <h1 className=\"title\">Please Log In</h1>\n  );\n\n  return (\n    <div>\n      <style jsx={true}>{`\n        .title {\n          font-family: Roboto;\n          font-size: 38px;\n          font-weight: bold;\n          font-style: normal;\n          font-stretch: normal;\n          line-height: 1.42;\n          letter-spacing: normal;\n          color: rgba(0, 0, 0, 0.85);\n          margin: auto;\n          text-align: center;\n        }\n      `}</style>\n      <Row type=\"flex\"justify=\"end\">\n        <Col offset={2} span={4} style={{ minWidth: \"320px\" }}>\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <div className=\"title\">{loginHeader}</div>\n          <br />\n          <br />\n          <Form\n            // {...formProps}\n            // className=\"login-form\"\n            layout={\"vertical\"}\n            // tslint:disable-next-line jsx-no-lambda\n            onSubmit={evt => {\n              if (!isLoginButtonDisabled) {\n                // setLoading(true);\n                evt.preventDefault();\n                onSubmit(email, password);\n              }\n            }}\n          >\n            <Form.Item label=\"Email\">\n              {getFieldDecorator(\"email\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your email!\"\n                  },\n                  {\n                    type: \"email\",\n                    message: \"The input is not valid email!\"\n                  }\n                ]\n                // initialValue: defaultEmail\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"mail\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  placeholder=\"Email\"\n                  size=\"large\"\n                  // onChange={handleEmailChange}\n                />\n              )}\n            </Form.Item>\n            <Form.Item label=\"Password\">\n              {getFieldDecorator(\"password\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your password!\"\n                  }\n                ]\n                // initialValue: defaultPassword\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  size=\"large\"\n                  // onChange={handlePasswordChange}\n                />\n              )}\n            </Form.Item>\n            <br />\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={\n                  hasErrors(getFieldsError()) ||\n                  !isFieldTouched(\"email\") ||\n                  !isFieldTouched(\"password\")\n                }\n                block={true}\n                // loading={loading}\n                size={\"large\"}\n                // tslint:disable-next-line jsx-no-lambda\n                onClick={evt => {\n                  // setLoading(true);\n                  evt.preventDefault();\n                  // onSubmit(email, password);\n                  onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n                }}\n              >\n                Log in\n              </Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n      {/* <Link to=\"/register\">Sign Up</ Link>\n      {/* <br />\n      <br />\n      Or <a href=\"/register\">register now!</a> */}\n    </div>\n  );\n};\n\nconst WrappedLoginForm = Form.create({ name: \"login\" })(LoginForm);\n\nexport default WrappedLoginForm;\n// // // import Login from 'ant-design-pro/lib/Login';\n// // import { Alert, Checkbox} from 'antd';\n// // import React from \"react\";\n// // // import {\n// // //   BrowserRouter as Router,\n// // //   Switch,\n// // //   Route,\n// // //   Link\n// // // } from \"react-router-dom\";\n// // import ReactDOM from 'react-dom';\n// // const { Tab, UserName, Password, Mobile, Captcha, Submit } = Login;\n// //\n// // class LoginDemo extends React.Component {\n// // // export default function Login() {\n// //   state = {\n// //     notice: '',\n// //     type: 'tab2',\n// //     autoLogin: true,\n// //   };\n// //   onSubmit = (err, values) => {\n// //     console.log('value collected ->', {\n// //       ...values,\n// //       autoLogin: this.state.autoLogin,\n// //     });\n// //     if (this.state.type === 'tab1') {\n// //       this.setState(\n// //         {\n// //           notice: '',\n// //         },\n// //         () => {\n// //           if (!err && (values.username !== 'admin' || values.password !== '888888')) {\n// //             setTimeout(() => {\n// //               this.setState({\n// //                 notice: 'The combination of username and password is incorrect!',\n// //               });\n// //             }, 500);\n// //           }\n// //         }\n// //       );\n// //     }\n// //   };\n// //   onTabChange = key => {\n// //     this.setState({\n// //       type: key,\n// //     });\n// //   };\n// //   changeAutoLogin = e => {\n// //     this.setState({\n// //       autoLogin: e.target.checked,\n// //     });\n// //   };\n// //   render() {\n// //     return (\n// //       <div className=\"login-warp\">\n// //         <Login\n// //           defaultActiveKey={this.state.type}\n// //           onTabChange={this.onTabChange}\n// //           onSubmit={this.onSubmit}\n// //         >\n// //           <Tab key=\"tab1\" tab=\"Account\">\n// //             {this.state.notice && (\n// //               <Alert\n// //                 style={{ marginBottom: 24 }}\n// //                 message={this.state.notice}\n// //                 type=\"error\"\n// //                 showIcon\n// //                 closable\n// //               />\n// //             )}\n// //             <UserName name=\"username\" />\n// //             <Password name=\"password\" />\n// //           </Tab>\n// //           <Tab key=\"tab2\" tab=\"Mobile\">\n// //             <Mobile name=\"mobile\" />\n// //             <Captcha onGetCaptcha={() => console.log('Get captcha!')} name=\"captcha\" />\n// //           </Tab>\n// //           <div>\n// //             <Checkbox checked={this.state.autoLogin} onChange={this.changeAutoLogin}>\n// //               Keep me logged in\n// //             </Checkbox>\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Forgot password\n// //             </a>\n// //           </div>\n// //           <Submit>Login</Submit>\n// //           <div>\n// //             Other login methods\n// //             <span className=\"icon icon-alipay\" />\n// //             <span className=\"icon icon-taobao\" />\n// //             <span className=\"icon icon-weibo\" />\n// //             <a style={{ float: 'right' }} href=\"\">\n// //               Register\n// //             </a>\n// //           </div>\n// //         </Login>\n// //       </div>\n// //     );\n// //   }\n// // }\n// //\n// // ReactDOM.render(<LoginDemo />);\n// // export default LoginDemo;\n// import ReactDOM from 'react-dom';\n// import React, { useState } from \"react\";\n// import {Form, Icon, Input, Button, Checkbox, Row, Col } from \"antd\";\n// //\n// // class NormalLoginForm extends React.Component {\n// //   const {\n// //       getFieldDecorator,\n// //       getFieldsError,\n// //       getFieldValue,\n// //       isFieldTouched\n// //   } = props.form;\n// //\n// //   handleSubmit = e => {\n// //     e.preventDefault();\n// //     this.props.form.validateFields((err, values) => {\n// //       if (!err) {\n// //         console.log('Received values of form: ', values);\n// //       }\n// //     });\n// //   };\n// //   // const {\n// //   //     getFieldDecorator,\n// //   //     getFieldsError,\n// //   //     getFieldValue,\n// //   //     isFieldTouched\n// //   // } = props.form;\n// //\n// //   render() {\n// //     const { getFieldDecorator } = this.props.form;\n// //     return (\n// //       <Form onSubmit={this.handleSubmit} className=\"login-form\">\n// //         <Form.Item>\n// //           {getFieldDecorator('username', {\n// //             rules: [{ required: true, message: 'Please input your username!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               placeholder=\"Username\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('password', {\n// //             rules: [{ required: true, message: 'Please input your Password!' }],\n// //           })(\n// //             <Input\n// //               prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n// //               type=\"password\"\n// //               placeholder=\"Password\"\n// //             />,\n// //           )}\n// //         </Form.Item>\n// //         <Form.Item>\n// //           {getFieldDecorator('remember', {\n// //             valuePropName: 'checked',\n// //             initialValue: true,\n// //           })(<Checkbox>Remember me</Checkbox>)}\n// //           <a className=\"login-form-forgot\" href=\"\">\n// //             Forgot password\n// //           </a>\n// //           <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n// //             Log in\n// //           </Button>\n// //           Or <a href=\"\">register now!</a>\n// //         </Form.Item>\n// //       </Form>\n// //     );\n// //   }\n// // }\n// //\n// // const WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\n// //\n// // // ReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n// // export default NormalLoginForm;\n// // //\n// const LoginForm = props => {\n//   const defaultEmail = \"\";\n//   const defaultPassword = \"\";\n//   const [email, setEmail] = useState(defaultEmail);\n//   const [password, setPassword] = useState(defaultPassword);\n//\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   const {\n//     getFieldDecorator,\n//     getFieldsError,\n//     getFieldValue,\n//     isFieldTouched\n//   } = props.form;\n//\n//   function hasErrors(fieldsError) {\n//     return Object.keys(fieldsError).some(field => fieldsError[field]);\n//   }\n//\n//   const isLoginButtonDisabled =\n//     hasErrors(getFieldsError()) ||\n//     !isFieldTouched(\"email\") ||\n//     !isFieldTouched(\"password\");\n//\n//   const onSubmit = (email, password) => {\n//     setEmail(email);\n//     setPassword(password);\n//     setIsLoggedIn(true);\n//     console.log(email, password, isLoggedIn);\n//   };\n//\n//   const loginHeader = isLoggedIn ? (\n//     <h1 className=\"title\">Welcome Back</h1>\n//   ) : (\n//     <h1 className=\"title\">Log In/Sign Up Page</h1>\n//   );\n//\n//   return (\n//     <div>\n//       <style jsx={true}>{`\n//         .title {\n//           font-size: 50px;\n//           letter-spacing: normal;\n//           color: rgba(0, 0, 0, 0.85);\n//           margin: auto;\n//           text-align: center;\n//         }\n//       `}</style>\n//       <Row type=\"flex\" justify=\"center\">\n//         <Col span={4}>\n//         <div>helllo</div>\n//         </Col>\n//         <Col span={4}>\n//         <div>helllo2</div>\n//         </Col>\n//\n//       </Row>\n//       </div>\n//       // <Row type=\"flex\" justify=\"center\">\n//       //   <Col span={4} style={{ minWidth: \"320px\" }}>\n//       //     <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <br />\n//           // <div className=\"title\">{loginHeader}</div>\n//           // <br />\n//           // <br />\n//           // <Form\n//           //   // {...formProps}\n//           //   // className=\"login-form\"\n//           //   // layout={\"\"}\n//           //   // tslint:disable-next-line jsx-no-lambda\n//           //   onSubmit={evt => {\n//           //     if (!isLoginButtonDisabled) {\n//           //       // setLoading(true);\n//           //       evt.preventDefault();\n//           //       onSubmit(email, password);\n//           //     }\n//           //   }}\n//           // >\n//           //   <Form.Item label=\"Username\">\n//           //     {getFieldDecorator(\"username\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"username\"\n//           //         }\n//           //         // ,{\n//           //         //   type: \"username\",\n//           //         //   message: \"The input is not valid email!\"\n//           //         // }\n//           //       ]\n//           //       // initialValue: defaultEmail\n//           //     })(\n//           //       <Input\n//           //\n//           //         placeholder=\"username\"\n//           //         size=\"large\"\n//           //         // onChange={handleEmailChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <Form.Item label=\"Password\">\n//           //     {getFieldDecorator(\"password\", {\n//           //       rules: [\n//           //         {\n//           //           required: true,\n//           //           message: \"password\"\n//           //         }\n//           //       ]\n//           //       // initialValue: defaultPassword\n//           //     })(\n//           //       <Input\n//           //\n//           //         type=\"password\"\n//           //         placeholder=\"Password\"\n//           //         size=\"large\"\n//           //         // onChange={handlePasswordChange}\n//           //       />\n//           //     )}\n//           //   </Form.Item>\n//           //   <br />\n//           //   <Form.Item>\n//           //     <Button\n//           //       type=\"primary\"\n//           //       htmlType=\"submit\"\n//           //       disabled={\n//           //         hasErrors(getFieldsError()) ||\n//           //         !isFieldTouched(\"username\") ||\n//           //         !isFieldTouched(\"password\")\n//           //       }\n//           //       block={true}\n//           //       // loading={loading}\n//           //       size={\"large\"}\n//           //       // tslint:disable-next-line jsx-no-lambda\n//           //       onClick={evt => {\n//           //         // setLoading(true);\n//           //         evt.preventDefault();\n//           //         // onSubmit(email, password);\n//           //         onSubmit(getFieldValue(\"email\"), getFieldValue(\"password\"));\n//           //       }}\n//           //     >\n//           //       Log in\n//           //     </Button>\n//           //   </Form.Item>\n//           // </Form>\n//       //     </Col>\n//       // </Row>\n//       // {/* <Link to=\"/register\">Sign Up</ Link>\n//     //  {/* <br />\n//     //  <br />\n//   //    Or <a href=\"/register\">register now!</a> */}\n//   //  </div>\n//   );\n// };\n//\n// const WrappedNormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\n// //\n// export default WrappedNormalLoginForm;\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        themislee\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignIn() {\n  const classes = useStyles();\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import './App.css';\nimport List from './List' ;\nimport WrappedLoginForm from './Login';\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport SignIn from './SignIn';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"AppNav\">\n          <ul>\n            <li className=\"Appli\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"Appli\">\n              <Link to=\"/lists\">List</Link>\n            </li>\n            <li className=\"Appli\">\n              <Link to=\"/login\">Login</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/lists\" exact component={List} />\n          <Route path=\"/login\" exact component={SignIn} />\n          <Route path=\"/\">\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}